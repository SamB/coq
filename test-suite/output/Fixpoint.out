fix F (A B : Set) (f : A -> B) (l : list A) {struct l} : 
list B := match l with
          | nil => nil (A:=B)
          | a :: l0 => f a :: F A B f l0
          end
     : forall A B : Set, (A -> B) -> list A -> list B
let fix f (m : nat) : nat := match m with
                             | 0 => 0
                             | S m' => f m'
                             end in f 0
     : nat
fix even_pos_odd_pos 2
 with (odd_pos_even_pos (n:_) (H:odd n) {struct H} : n >= 1).
 intros.
 destruct H.
   omega.
  
   apply odd_pos_even_pos in H.
   omega.
  
 intros.
 destruct H.
  apply even_pos_odd_pos in H.
  omega.

